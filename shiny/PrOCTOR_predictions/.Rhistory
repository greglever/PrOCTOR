plot(pc$rotation[,1],pc$rotation[,2],col=cols,pch=18,xlab="PC1 Loading",ylab="PC2 Loading",main="Principle Component Analysis")
legend("bottomleft",legend = c("Molecular Properties","Drug-Likeness Rules","Target Expression Features","Other Target-Based Features"),text.col = c("navyblue","darkgreen","orange3","red"),cex=0.75)
legend("bottomleft",legend = c("Molecular Properties","Drug-Likeness Rules","Target Expression Features","Other Target-Based Features"),text.col = c("navyblue","darkgreen","orange3","red"),cex=0.75,bty='n')
plot(pc$rotation[,1],pc$rotation[,2],col=cols,pch=18,xlab="PC1 Loading",ylab="PC2 Loading",main="Principle Component Analysis")
legend("bottomleft",legend = c("Molecular Properties","Drug-Likeness Rules","Target Expression Features","Other Target-Based Features"),text.col = c("navyblue","darkgreen","orange3","red"),cex=0.75,bty='n')
load("~/Dropbox/ElementoLab/ClinTox/consensusModels/sub_models_expr3PC_all_30_v2.RData")
plot(pc$rotation[,1],pc$rotation[,2],pch=18,xlab="PC1 Loading",ylab="PC2 Loading",main="Principle Component Analysis")
plot(pc$rotation[,1],pc$rotation[,2],pch=18,xlab="PC1 Loading",ylab="PC2 Loading",main="Principle Component Analysis\nExpression Features Only")
text(labels = rownames(pc$rotation),x = pc$rotation[,1],y=pc$rotation[,2]+0.01)
text(labels = rownames(pc$rotation),x = pc$rotation[,1],y=pc$rotation[,2]+0.01,cex=0.5)
plot(pc$rotation[,1],pc$rotation[,2],pch=18,xlab="PC1 Loading",ylab="PC2 Loading",main="Principle Component Analysis")
text(labels = rownames(pc$rotation),x = pc$rotation[,1],y=pc$rotation[,2]+0.01,cex=0.5)
text(labels = rownames(pc$rotation),x = pc$rotation[,1],y=pc$rotation[,2]+0.01)
plot(pc$rotation[,1],pc$rotation[,2],pch=18,xlab="PC1 Loading",ylab="PC2 Loading",main="Principle Component Analysis")
text(labels = rownames(pc$rotation),x = pc$rotation[,1],y=pc$rotation[,2]+0.05)
plot(pc$rotation[,1],pc$rotation[,2],pch=18,xlab="PC1 Loading",ylab="PC2 Loading",main="Principle Component Analysis\nExpression Features")
text(labels = rownames(pc$rotation),x = pc$rotation[,1],y=pc$rotation[,2]+0.05)
log2(0.71/0.29)
remove.packages("Rcpi")
remove.packages("Rcpi",lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("rcdk",lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("rcdklibs",lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("ChemmineR",lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("ChemmineOB",lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("ChemmineOB")
source("https://bioconductor.org/biocLite.R")
biocLite("ChemmineR")
library(Rcdk)
library(rcdk)
install.package(rcdk)
install.packages(rcdk)
install.packages("rcdk")
install.packages('rJava', type='source')
install.packages("rcdk")
install.packages("rcdk")
library("rJava", lib.loc="~/Library/R/3.2/library")
library(rJava)
install.packages("rcdk")
library(rJava)
Double <- J("java.lang.Double")
d <- new( Double, "10.2" )
Double <- J("java.lang.Double")
uninstall.packages("rJava")
remove.packages("rJava")
remove.packages("rJava",lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rJava","http://rforge.net",type="source")
install.packages("rJava", "http://rforge.net", type = "source")
install.packages("rJava",, "http://rforge.net", type = "source")
library(rJava)
J("java.lang.Double")
.jinit()
J("java.lang.Double")
.jcall("java/lang/System","S","getProperty","java.runtime.version")
remove.packages("rJava")
install.packages("rcdk")
install.packages("rcdk")
remove.packages("rJava")
install.packages("rcdk")
library(rJava)
.jinit()
.jcall("java/lang/System","S","getProperty","java.runtime.version")
remove.packages("rJava")
install.packages("rJava",, "http://rforge.net", type = "source")
library(rJava)
remove.packages("rJava")
install.packages('rJava', type='source')
library(rJava)
require(rJava)
require("rJava")
remove.packages('rJava')
install.packages('rJava')
library(rJava)
remove.packages("rJava")
remove.packages("rJava")
install.packages("rJava",, "http://rforge.net", type = "source")
library(rJava)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
.jinit()
.jcall("java/lang/System","S","getProperty","java.runtime.version")
install.packages("rcdk")
library(ChemmineR)
library(ChemmineOB)
library(rcdk)
library(Rcpi)
library(randomForest)
library(ggplot2)
library(data.table)
source("https://bioconductor.org/biocLite.R")
biocLite("ChemmineOB")
extractDrugRotatableBondsCount(parse.smiles(as.vector(SMILE)))[[1]] #rotatable bonds count
library(ChemmineR)
library(rcdk)
library(Rcpi)
install.packages("Rcpi")
biocLite("Rcpi")
library(Rcpi)
extractDrugRotatableBondsCount(parse.smiles(as.vector(SMILE)))[[1]] #rotatable bonds count
SMILE="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C"
extractDrugRotatableBondsCount(parse.smiles(as.vector(SMILE)))[[1]] #rotatable bonds count
rm(list=ls())
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
library(shiny)
library(shinyjs)
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
setwd("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
load("initial_values.RData")
setwd("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
initial_prediction_df
initial_prediction_df$Log2_Odds=rep(NA,3)
initial_prediction_dfProb=rep(NA,3)
initial_prediction_dfPrediction=rep(NA,3)
initial_feature_df
initial_feature_df$Feature_Value=NA
initial_feature_df$Feature_Quantile=NA
initial_feature_df
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
rm(list=ls())
load("initial_values.RData")
initial_feature_df$Feature_Value=NA
initial_feature_df$Feature_Quantile=NA
initial_prediction_dfPrediction=rep(NA,3)
initial_prediction_dfProb=rep(NA,3)
initial_prediction_df$Log2_Odds=rep(NA,3)
save(list=ls(),file = "~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions/initial_values.RData")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
feature_df=initial_feature_structure
this_targets="BRAF"
this_SMILES="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C"
this_features=getAllFeatures(this_targets,this_SMILES)
getAllFeatures
SMILE
SMILE="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C"
targets="BRAF"
getTargetFeatures(targets)
getStructuralFeatures(SMILE)
getAllFeatures(SMILE,targets)
getAllFeatures(this_SMILES,this_targets)
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
this_features=getAllFeatures(this_SMILES,this_targets)
sapply(feature_df$Feature,function(x) this_features[names(this_features)==x])
feature_df$Feature
ames(this_features)
names(this_features)
as.vector(unlist(feature_df$Feature))
sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x])
names(this_features)
names(this_features)
as.vector(unlist(feature_df$Feature))
feature_df
initial_feature_structure
initial_feature_df
rm(list=ls())
load("initial_values.RData")
initial_feature_df[,-1*(14:43)]
initial_feature_df[,-1*(14:43),with=TRUE]
initial_feature_df[,-1*(14:43),with=FALSE]
initial_feature_df[-1*(14:43),]
rbind(initial_feature_df[-1*(14:43),],data.table(Feature=c("PC1","PC2","PC3"),Feature_Type=c("Gene Expression Principle Component 1","Gene Expression Principle Component 2","Gene Expression Principle Component 3")))
rbind(initial_feature_df[-1*(14:43),],data.table(Feature=c("PC1","PC2","PC3"),Feature_Type=c("Gene Expression Principle Component 1","Gene Expression Principle Component 2","Gene Expression Principle Component 3")),fill=T)
names(this_features)
initial_feature_df=rbind(initial_feature_df[-1*(14:43),],data.table(Feature=c("PC1","PC2","PC3"),Feature_Type=c("Gene Expression Principle Component 1","Gene Expression Principle Component 2","Gene Expression Principle Component 3")),fill=T)
initial_feature_df
save(list=ls(),file = "~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions/initial_values.RData")
feature_df=initial_feature_df
this_SMILES="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C"
this_targets="BRAF"
sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x])
this_features=getAllFeatures(this_SMILES,this_targets)
sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x])
this_features=c(getAllFeatures(this_SMILES,this_targets),nTargets=length(this_targets)
sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x])
this_features
this_features=c(getAllFeatures(this_SMILES,this_targets),nTargets=length(this_targets))
sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x])
this_features
rm(list=ls())
load("initial_values.RData")
which(initial_feature_df$Feature=="LogpSolubility")
initial_feature_df[-10,]
initial_feature_df=initial_feature_df[-10,]
getAllFeatures=function(SMILE,targets){
mol=smiles2sdf(as(as.vector(SMILE),"SMIset"))
props=propOB(mol)
MW=props$MW # molecular weight
XlogP=props$logP # octanol-water partition coefficient log P
HBD=props$HBD #hydrogen bond donor count
HBA=props$HBA2 #hydrogen bond acceptor count
PSA=props$TPSA #polar surface area
FC=sum(bonds(mol, type="bonds")[[1]]$charge) #formal charge
RBC=extractDrugRotatableBondsCount(parse.smiles(as.vector(SMILE)))[[1]] #rotatable bonds count
refr=props$MR # refractivity
alogP=NA #
nA=sum(atomcountMA(mol,addH=FALSE)) #number atoms
AROMs=as.vector(rings(mol, type="count", arom=TRUE)[2])
nALERTS=sum(sapply(unwantedALERTS,function(x) as.numeric(smartsSearchOB(mol,x,uniqueMatches = TRUE)!=0)))
Ro5=as.numeric(MW<500&HBD<5&HBA<10&XlogP<5)
Veber=as.numeric(RBC<=10&PSA<=140)
Ghose=as.numeric(PSA<140&(findInterval(XlogP,c(-0.4,5.6))==1)&(findInterval(MW,c(160,480))==1)&(findInterval(nA,c(20,70))==1))
QED=calculate_QED(c(MW=MW,ALOGP=XlogP,HBA=HBA,HBD=HBD,PSA=PSA,ROTB=RBC,AROM=AROMs,ALERTS=nALERTS))
return(c(MolecularWeight=MW,XLogP=XlogP,HydrogenBondDonorCount=HBD,HydrogenBondAcceptorCount=HBA,PolarSurfaceArea=PSA,FormalCharge=FC,NumRings=AROMs,RotatableBondCount=RBC,Refractivity=refr,lossFreq=max(gene.alteration.frequency$deleterious[rownames(gene.alteration.frequency) %in% targets]/gene.alteration.frequency$Total[rownames(gene.alteration.frequency) %in% targets]),maxBtwn=max(gene.betweenness[names(gene.betweenness) %in% targets]),maxDegree=max(gene.degree[names(gene.degree) %in% targets]),Ro5=Ro5,Ghose=Ghose,Veber=Veber,wQED=QED$wQED,get_PC_value(targets)))
}
getStructuralFeatures=function(SMILE){
mol=smiles2sdf(as(as.vector(SMILE),"SMIset"))
props=propOB(mol)
MW=props$MW # molecular weight
XlogP=props$logP # octanol-water partition coefficient log P
HBD=props$HBD #hydrogen bond donor count
HBA=props$HBA2 #hydrogen bond acceptor count
PSA=props$TPSA #polar surface area
FC=sum(bonds(mol, type="bonds")[[1]]$charge) #formal charge
RBC=extractDrugRotatableBondsCount(parse.smiles(as.vector(SMILE)))[[1]] #rotatable bonds count
refr=props$MR # refractivity
alogP=NA #
nA=sum(atomcountMA(mol,addH=FALSE)) #number atoms
AROMs=as.vector(rings(mol, type="count", arom=TRUE)[2])
nALERTS=sum(sapply(unwantedALERTS,function(x) as.numeric(smartsSearchOB(mol,x,uniqueMatches = TRUE)!=0)))
Ro5=as.numeric(MW<500&HBD<5&HBA<10&XlogP<5)
Veber=as.numeric(RBC<=10&PSA<=140)
Ghose=as.numeric(PSA<140&(findInterval(XlogP,c(-0.4,5.6))==1)&(findInterval(MW,c(160,480))==1)&(findInterval(nA,c(20,70))==1))
QED=calculate_QED(c(MW=MW,ALOGP=XlogP,HBA=HBA,HBD=HBD,PSA=PSA,ROTB=RBC,AROM=AROMs,ALERTS=nALERTS))
return(c(MolecularWeight=MW,XLogP=XlogP,HydrogenBondDonorCount=HBD,HydrogenBondAcceptorCount=HBA,PolarSurfaceArea=PSA,FormalCharge=FC,NumRings=AROMs,RotatableBondCount=RBC,Refractivity=refr,Ro5=Ro5,Ghose=Ghose,Veber=Veber,wQED=QED$wQED))
}
save(list=ls(),file = "~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions/initial_values.RData")
feature_df=initial_feature_structure
this_SMILES="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C"
this_targets="BRAF"
this_features=c(getAllFeatures(this_SMILES,this_targets),nTargets=length(this_targets))
sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x])
initial_feature_df
feature_df=LogpSolubility
feature_df=initial_feature_df
sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x])
as.vector(sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x]))
feature_df$Feature_Value=as.vector(sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x]))
for(this_var in feature_df$Feature){
newval=feature_df$Feature_Value[feature_df$Feature==this_var]
Fn=ecdf(sample_drugs[,which(colnames(sample_drugs)==this_var)]);
feature_df$Feature_Quantile[feature_df$Feature==this_var]=Fn(newval);
}
for(this_var in feature_df$Feature){
newval=feature_df$Feature_Value[feature_df$Feature==this_var]
cat(this_var,"\t",newval,"\n")
Fn=ecdf(sample_drugs[,which(colnames(sample_drugs)==this_var)]);
feature_df$Feature_Quantile[feature_df$Feature==this_var]=Fn(newval);
}
colnames(sample_drugs)
initial_feature_structure
initial_feature_structure=initial_feature_structure[,-4,with=TRUE]
initial_feature_structure
load("initial_values.RData")
initial_feature_structure[,-4,with=TRUE]
initial_feature_structure[,-4,with=FALSE]
initial_feature_target[,-4,with=TRUE]
initial_feature_target[,-4,with=FALSE]
rm(list=ls())
load("initial_values.RData")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
is.na(initial_prediction_df$Log2_Odds)
sum(is.na(initial_prediction_df$Log2_Odds))
initial_prediction_df
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
rf.list[[1]]
tmp=rf.list[[1]]
tmp$test
tmp$forest
get_PC_value
sapply(colnames(sample_drugs),feature_df$Feature_Value[feature_df$Feature==x])
colnames(sample_drugs)
sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")]
c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3"))
feature_df=initial_feature_df
c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3"))
sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])
feature_df$Feature
feature_df$Feature_Value
feature_df$Feature_Type
feature_df$Feature[feature_df$Feature_Type %in% "Other Target-Based Features"]
feature_df$Feature[feature_df$Feature_Type %in% "Chemical Features"]
rm(list=ls())
load("initial_values.RData")
get_all_value<-function(feature_df){
return(sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]))
}
get_target_value<-function(feature_df){
target_features=sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature[feature_df$Feature_Type %in% "Other Target-Based Features"]],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])
return(target_features)
}
get_structure_value<-function(feature_df){
struct_features=feature_df$Feature[feature_df$Feature_Type %in% "Chemical Features"]
return(c(struct_features,struct_features[2]))
}
save(list=ls(),file = "~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions/initial_values.RData")
feature_df=initial_feature_df
this_SMILES="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C"
this_targets="BRAF"
this_features=c(getAllFeatures(this_SMILES,this_targets),nTargets=length(this_targets))
feature_df$Feature_Value=as.vector(sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x]))
feature_df
colnames(sample_drugs)
colnames(sample_drugs)[colnames(sample_drugs)= "LogpSolubility"]="XLogP"
colnames(sample_drugs)[colnames(sample_drugs)=="LogpSolubility"]="XLogP"
return(sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]))
sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])
get_all_value<-function(feature_df){
return(sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]))
}
feature_structure=feature_df[feature_df$Feature_Type %in% c("Chemical Features","Drug-Likeness Rules"),]
if(feature_df$Feature_Value[feature_df$Feature=="Ro5"]==1){feature_structure$Feature_Value[feature_structure$Feature=="Ro5"]="Pass"}else{feature_structure$Feature_Value[feature_structure$Feature=="Ro5"]="Fail"}
this_pred=median(sapply(rf.list,function(this_model) predict(this_model,sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]),"prob")[1]  ))
sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]),"prob")[1]  )
sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])
this_pred=median(sapply(rf.list,function(this_model) predict(this_model,sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]),"prob")[1]  ))
colnames(sample_drugs)
get_all_value<-function(feature_df){
return(sapply(c(setdiff(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("Ro5","Ghose","Veber")),c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]))
}
get_all_value(feature_df)
this_pred=median(sapply(rf.list,function(this_model) predict(this_model,get_all_value(feature_df),"prob")[1]  ))
this_pred
this_pred_target=median(sapply(target.rf.list,function(this_model) predict(this_model,get_target_value(feature_df),"prob")[1]  ))
all_features=sapply(colnames(sample_drugs),function(x) feature_df$Feature_Value[feature_df$Feature==x])
all_features
all_features[c(1:10,44:46,48)],
all_features[c(1:10,44:46,48)]
all_features[c(1:10,44:46,48)][11:13]
sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature[feature_df$Feature_Type %in% "Other Target-Based Features"]],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])
get_target_value<-function(feature_df){
target_features=sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature[feature_df$Feature_Type %in% "Other Target-Based Features"]],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])
return(target_features[c(1:3,5:7)])
}
this_pred_target=median(sapply(target.rf.list,function(this_model) predict(this_model,get_target_value(feature_df),"prob")[1]  ))
this_pred_structure=median(sapply(structure.rf.list,function(this_model) predict(this_model,get_structure_value(feature_df),"prob")[1]  ))
get_structure_value(feature_df)
struct_features=feature_df$Feature[feature_df$Feature_Type %in% "Chemical Features"]
struct_features
struct_features=feature_df$Feature_Value[feature_df$Feature_Type %in% "Chemical Features"]
struct_features
get_structure_value(feature_df)
get_structure_value<-function(feature_df){
struct_features=feature_df$Feature_Value[feature_df$Feature_Type %in% "Chemical Features"]
return(c(struct_features,struct_features[2]))
}
get_structure_value(feature_df)
this_pred_structure=median(sapply(structure.rf.list,function(this_model) predict(this_model,get_structure_value(feature_df),"prob")[1]  ))
length(get_structure_value(feature_df))
c(struct_features,struct_features[2],feature_df$Feature_Value[feature_df$Feature=="wQED"])
get_structure_value<-function(feature_df){
struct_features=feature_df$Feature_Value[feature_df$Feature_Type %in% "Chemical Features"]
return(c(struct_features,struct_features[2],feature_df$Feature_Value[feature_df$Feature=="wQED"]))
}
this_pred_structure=median(sapply(structure.rf.list,function(this_model) predict(this_model,get_structure_value(feature_df),"prob")[1]  ))
rm(list=ls())
get_all_value<-function(feature_df){
return(sapply(c(setdiff(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("Ro5","Ghose","Veber")),c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]))
}
get_target_value<-function(feature_df){
target_features=sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature[feature_df$Feature_Type %in% "Other Target-Based Features"]],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])
return(target_features[c(1:3,5:7)])
}
get_structure_value<-function(feature_df){
struct_features=feature_df$Feature_Value[feature_df$Feature_Type %in% "Chemical Features"]
return(c(struct_features,struct_features[2],feature_df$Feature_Value[feature_df$Feature=="wQED"]))
}
colnames(sample_drugs)[colnames(sample_drugs)= "LogpSolubility"]="XLogP"
colnames(sample_drugs)[colnames(sample_drugs)=="LogpSolubility"]="XLogP"
load("initial_values.RData")
get_all_value<-function(feature_df){
return(sapply(c(setdiff(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("Ro5","Ghose","Veber")),c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]))
}
get_target_value<-function(feature_df){
target_features=sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature[feature_df$Feature_Type %in% "Other Target-Based Features"]],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])
return(target_features[c(1:3,5:7)])
}
get_structure_value<-function(feature_df){
struct_features=feature_df$Feature_Value[feature_df$Feature_Type %in% "Chemical Features"]
return(c(struct_features,struct_features[2],feature_df$Feature_Value[feature_df$Feature=="wQED"]))
}
colnames(sample_drugs)[colnames(sample_drugs)=="LogpSolubility"]="XLogP"
save(list=ls(),file = "~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions/initial_values.RData")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
output_scores_df2
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
rm(list=ls())
load("~/Dropbox/ElementoLab/ClinTox/consensusModels/sub_models_expr3PC_all_30_v2.RData")
rf.list[[1]]$forest
rf.list[[1]]$classes
rf.list[[1]]$mtry
rf.list[[1]]$ntree
rf.list[[1]]$importance
rownames(rf.list[[1]]$importance)
target.rf.list[[1]]$ntree
rownames(target.rf.list[[1]]$importance)
rownames(structure.rf.list[[1]]$importance)
rm(list=ls())
load("initial_values.RData")
load("~/Dropbox/ElementoLab/ClinTox/consensusModels/sub_models_expr3PC_all_30_v2.RData")
get_all_value<-function(feature_df){
return(sapply(rownames(rf.list[[1]]$importance),function(x) feature_df$Feature_Value[feature_df$Feature==x]))
#  return(sapply(c(setdiff(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature],c("Ro5","Ghose","Veber")),c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x]))
}
get_target_value<-function(feature_df){
target_features=sapply(rownames(target.rf.list[[1]]$importance),function(x) feature_df$Feature_Value[feature_df$Feature==x])
#  target_features=sapply(c(colnames(sample_drugs)[colnames(sample_drugs) %in% feature_df$Feature[feature_df$Feature_Type %in% "Other Target-Based Features"]],c("PC1","PC2","PC3")),function(x) feature_df$Feature_Value[feature_df$Feature==x])[c(1:3,5:7)]
return(target_features)
}
get_structure_value<-function(feature_df){
struct_features=sapply(rownames(structure.rf.list[[1]]$importance),function(x) feature_df$Feature_Value[feature_df$Feature==x])
#  struct_features=feature_df$Feature_Value[feature_df$Feature_Type %in% "Chemical Features"]
#  struct_features=c(struct_features,struct_features[2],feature_df$Feature_Value[feature_df$Feature=="wQED"])
return(struct_features)
}
save(list=ls(),file = "~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions/initial_values.RData")
feature_df=initial_feature_df
this_SMILES="[H][C@@]12C[C@@H](C)[C@](O)(C(=O)CO)[C@@]1(C)C[C@H](O)[C@@]1(F)[C@@]2([H])CCC2=CC(=O)C=C[C@]12C"
this_targets=c("NR3C1","NR0B1","ANXA1","NOS2")
this_features=c(getAllFeatures(this_SMILES,this_targets),nTargets=length(this_targets))
feature_df$Feature_Value=as.vector(sapply(as.vector(unlist(feature_df$Feature)),function(x) this_features[names(this_features)==x]))
this_pred=median(sapply(rf.list,function(this_model) predict(this_model,get_all_value(feature_df),"prob")[1]  ))
this_pred_target=median(sapply(target.rf.list,function(this_model) predict(this_model,get_target_value(feature_df),"prob")[1]  ))
this_pred_structure=median(sapply(structure.rf.list,function(this_model) predict(this_model,get_structure_value(feature_df),"prob")[1]  ))
this_pred
this_pred_target
this_pred_structure
PrOCTOR(SMILE="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C",targets=c("BRAF")) # Vemurafenib
PrOCTOR=function(SMILE,targets){
featureset=getAllFeatures(SMILE,targets)
prob=1-median(sapply(rf.list,function(this_model) predict(this_model,featureset,"prob")[1]  ))
return(list(pred=c("Safe","Toxic")[as.numeric(prob<0.5)+1],prob=prob,score=log2(prob/(1-prob))))
}
PrOCTOR(SMILE="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C",targets=c("BRAF")) # Vemurafenib
featureset=getAllFeatures(SMILE,targets)
getAllFeatures
getAllFeatures(SMILE,targets)
SMILE=this_SMILES
targets=this_targets
featureset=getAllFeatures(SMILE,targets)
prob=1-median(sapply(rf.list,function(this_model) predict(this_model,featureset,"prob")[1]  ))
load("~/Dropbox/ElementoLab/ClinTox/consensusModels/sub_models_expr3PC_all_30_v2.RData")
prob=1-median(sapply(rf.list,function(this_model) predict(this_model,featureset,"prob")[1]  ))
featureset
prob=1-median(sapply(rf.list,function(this_model) predict(this_model,featureset[!names(featureset) %in% c("Ro5","Ghose","Veber")],"prob")[1]  ))
PrOCTOR(SMILE="CCCS(=O)(=O)NC1=C(F)C(C(=O)C2=CNC3=NC=C(C=C23)C2=CC=C(Cl)C=C2)=C(F)C=C1C",targets=c("BRAF")) # Vemurafenib
ist(pred=c("Safe","Toxic")[as.numeric(prob<0.5)+1],prob=prob,score=log2(prob/(1-prob)))
list(pred=c("Safe","Toxic")[as.numeric(prob<0.5)+1],prob=prob,score=log2(prob/(1-prob)))
this_targets
this_pred
this_pred_structure
this_pred_target
rm(list=ls())
load("initial_values.RData")
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
rf.list[[1]]$votes
rf.list[[1]]$votes[,1]
head(rf.list[[1]]$votes)
(rf.list[[1]]$votes[,1])[rf.list[[1]]$y]
(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"]
rm(list=ls())
load("initial_values.RData")
output_scores_df2
output_scores_df=rbind(data.table(prob=(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"],score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"])),class="Toxicity Failure"),data.table(prob=,score=,class="Approved"))
data.table(prob=(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"],score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"]))
)
output_scores_df=rbind(data.table(prob=(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"],score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"])),class="Toxicity Failure"),data.table(prob=(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"],score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y!="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y!="failed"])),class="Approved"))
output_scores_df
ggplot(output_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = "none")+ggtitle(paste0("Overall log2 odds Distribution"))
ggplot(trainingset_scores,aes(x=(score),fill=class))+geom_density(alpha=0.5)+xlab("")+scale_fill_manual(values=c("red","skyblue"),name="Training Set Class")+xlab("PrOCTOR Score (- log2 Odds of Toxicity)")+theme_bw()+ theme(legend.position=c(0.25,0.8),title =element_text(size=12, face='bold'),axis.title = element_text(size=11,face='bold'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ geom_segment(aes(x = res$score, y = 0.33, xend = res$score, yend = 0), arrow = arrow(length = unit(0.5, "cm")))+ggtitle(paste0("Predicted ",res$pred))+ annotate("text", x = res$score, y = 0.35, label = paste0("PrOCTOR Score = ",round(abs(res$score),5)))+annotate("text",x=-6.75,y=-0.01,label="toxic",col="red")+annotate("text",x=4.25,y=-0.01,label="safe",col="skyblue3")
ggplot(trainingset_scores,aes(x=(score),fill=class))+geom_density(alpha=0.5)+xlab("")+scale_fill_manual(values=c("red","skyblue"),name="Training Set Class")+xlab("PrOCTOR Score (- log2 Odds of Toxicity)")+theme_bw()+ theme(legend.position=c(0.25,0.8),title =element_text(size=12, face='bold'),axis.title = element_text(size=11,face='bold'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ geom_segment(aes(x = res$score, y = 0.33, xend = res$score, yend = 0), arrow = arrow(length = unit(0.5, "cm")))+ggtitle(paste0("Predicted ",res$pred))+ annotate("text", x = res$score, y = 0.35, label = paste0("PrOCTOR Score = ",round(abs(res$score),5)))+annotate("text",x=-6.75,y=-0.01,label="toxic",col="red")+annotate("text",x=4.25,y=-0.01,label="safe",col="skyblue3")
ggplot(trainingset_scores,aes(x=(score),fill=class))+geom_density(alpha=0.5)+xlab("")+scale_fill_manual(values=c("red","skyblue"),name="Training Set Class")+xlab("PrOCTOR Score (- log2 Odds of Toxicity)")
trainingset_scores
trainingset_scores=cbind(trainingset_scores,data.table(score=log2(trainingset_scores$probs/(1-trainingset_scores$probs))))
trainingset_scores$class=gsub(" Trials","",gsub(" Drugs","",gsub("[ ]$","",gsub("\\-.*$","",trainingset_scores$class))))
ggplot(trainingset_scores,aes(x=(score),fill=class))+geom_density(alpha=0.5)+xlab("")+scale_fill_manual(values=c("red","skyblue"),name="Training Set Class")+xlab("PrOCTOR Score (- log2 Odds of Toxicity)")
ggplot(output_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = "none")+ggtitle(paste0("Overall log2 odds Distribution"))
ggplot(trainingset_scores,aes(x=(probs),fill=class))+geom_density(alpha=0.5)+xlab("")+scale_fill_manual(values=c("red","skyblue"))
sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:500,function(i) (rf.list[[i]]$votes[,1])[j])))
median(sapply(1:500,function(i) (rf.list[[i]]$votes[,1])[j])))
median(sapply(1:500,function(i) (rf.list[[i]]$votes[,1])[j]))
j=1
median(sapply(1:500,function(i) (rf.list[[i]]$votes[,1])[j]))
length(rf.list)
output_scores_df=rbind(data.table(prob=sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j]))),score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"])),class="Toxicity Failure"),data.table(prob=(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"],score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y!="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y!="failed"])),class="Approved"))
sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j])))
output_scores_df=rbind(data.table(prob=sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j]))),score=log2(sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j])))/(1-sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j]))))),class="Toxicity Failure"),data.table(prob=(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"],score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y!="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y!="failed"])),class="Approved"))
output_scores_df
output_scores_df=rbind(data.table(prob=sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j]))),score=log2(sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j])))/(1-sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j]))))),class="Toxicity Failure"),data.table(prob=sapply(which(rf.list[[1]]$y=="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j]))),score=log2(sapply(which(rf.list[[1]]$y!="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j])))/(1-sapply(which(rf.list[[1]]$y!="failed"),function(j) median(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[j]))))),class="Approved"))
ggplot(output_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = "none")+ggtitle(paste0("Overall log2 odds Distribution"))
output_scores_df=rbind(data.table(prob=(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"],score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"])),class="Toxicity Failure"),data.table(prob=(rf.list[[1]]$votes[,1])[rf.list[[1]]$y=="failed"],score=log2((rf.list[[1]]$votes[,1])[rf.list[[1]]$y!="failed"]/(1-(rf.list[[1]]$votes[,1])[rf.list[[1]]$y!="failed"])),class="Approved"))
ggplot(output_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = "none")+ggtitle(paste0("Overall log2 odds Distribution"))
length(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]))
output_scores_df=rbind(data.table(prob=sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]),score=log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]))),class="Toxicity Failure"),data.table(data.table(prob=sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]),score=log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y!="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y!="failed"]))),class="Approved"))
output_scores_df=rbind(data.table(prob=sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]),score=log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]))),class="Toxicity Failure"),data.table(data.table(prob=sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]),score=log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y!="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y!="failed"]))),class="Approved"))
data.table(prob=sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]),score=log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"]))),class="Toxicity Failure")
data.table(prob=as.vector(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])))),class="Toxicity Failure")
output_scores_df=rbind(data.table(prob=as.vector(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])))),class="Toxicity Failure"),data.table(prob=as.vector(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y!="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y!="failed"])))),class="Approved"))
ggplot(output_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = "none")+ggtitle(paste0("Overall log2 odds Distribution"))
output_target_scores_df=rbind(data.table(prob=as.vector(sapply(1:30,function(i) (target.rf.list[[i]]$votes[,1])[target.rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (target.rf.list[[i]]$votes[,1])[target.rf.list[[1]]$y=="failed"])/(1-sapply(1:30,function(i) (target.rf.list[[i]]$votes[,1])[target.rf.list[[1]]$y=="failed"])))),class="Toxicity Failure"),data.table(prob=as.vector(sapply(1:30,function(i) (target.rf.list[[i]]$votes[,1])[target.rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (target.rf.list[[i]]$votes[,1])[target.rf.list[[1]]$y!="failed"])/(1-sapply(1:30,function(i) (target.rf.list[[i]]$votes[,1])[target.rf.list[[1]]$y!="failed"])))),class="Approved"))
output_struct_scores_df=rbind(data.table(prob=as.vector(sapply(1:30,function(i) (structure.rf.list[[i]]$votes[,1])[structure.rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (structure.rf.list[[i]]$votes[,1])[structure.rf.list[[1]]$y=="failed"])/(1-sapply(1:30,function(i) (structure.rf.list[[i]]$votes[,1])[structure.rf.list[[1]]$y=="failed"])))),class="Toxicity Failure"),data.table(prob=as.vector(sapply(1:30,function(i) (structure.rf.list[[i]]$votes[,1])[structure.rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (structure.rf.list[[i]]$votes[,1])[structure.rf.list[[1]]$y!="failed"])/(1-sapply(1:30,function(i) (structure.rf.list[[i]]$votes[,1])[structure.rf.list[[1]]$y!="failed"])))),class="Approved"))
output_scores_df=rbind(data.table(prob=as.vector(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])))),class="Toxicity Failure"),data.table(prob=as.vector(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y=="failed"])),score=as.vector(log2(sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y!="failed"])/(1-sapply(1:30,function(i) (rf.list[[i]]$votes[,1])[rf.list[[1]]$y!="failed"])))),class="Approved"))
save(list=ls(),file = "~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions/initial_values.RData")
ggplot(output_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = "none")+ggtitle(paste0("Overall log2 odds Distribution"))
ggplot(output_target_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue3","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = c(0.8,0.875))+ggtitle(paste0("Target log2 odds Distribution"))
ggplot(output_struct_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue3","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position ="none")+ ggtitle(paste0("Structure Predicted log2 odds Distribution"))
ggplot(output_target_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue3","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = c(0.8,0.875))+ggtitle(paste0("Target log2 odds Distribution"))
p2=ggplot(output_target_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue3","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = c(0.1,0.875))+ggtitle(paste0("Target log2 odds Distribution"))
ggplot(output_target_scores_df,aes(x=-1*(score),fill=class))+geom_density(alpha=0.5,colour="black")+scale_fill_manual(values=(c("skyblue3","red")))+xlab("PrOCTOR Score (log2 Odds of Toxicity)")+theme_bw()+theme(legend.position = c(0.1,0.875))+ggtitle(paste0("Target log2 odds Distribution"))
runApp("~/Dropbox/ElementoLab/ClinTox/feature_interpretation/PrOCTOR/new_predictions")
